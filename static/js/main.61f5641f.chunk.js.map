{"version":3,"sources":["components/CardContainer/CardContainer.jsx","components/Player/Player.jsx","components/Dealer/Dealer.jsx","components/Deck/Deck.jsx","components/UI/Outcome/Outcome.jsx","pages/BattlePage/BattlePage.jsx","pages/LandingPage/LandingPage.jsx","App.js","index.js","utilities/cards.js"],"names":["CardContainer","card","className","suit","value","Player","playerDeck","playerTotal","playerBalance","betAmount","length","map","index","Dealer","dealerDeck","computerBalance","currentPlayer","computerTotal","console","log","realTotal","indexOf","calcTotal","Deck","deck","drawCard","stand","increaseBet","constructDeck","betAllow","onClick","Outcome","gameStatus","outcome","BattlePage","useState","currentDeck","setCurrentDeck","playerHand","setPlayerHand","computerHand","setComputerHand","setCurrentPlayer","setGameStatus","gameOutcome","setGameOutcome","setPlayerTotal","setComputerTotal","roundProgress","setRoundProgress","setBetAllow","setBetAmount","setPlayerBalance","setComputerBalance","turn","handTotal","newCard","cards","draw","prevState","bustCheck","bust","total","dealCards","newDeck","shuffledDeck","shuffle","hands","deal","useEffect","bustResult","to","LandingPage","href","App","path","render","props","ReactDOM","StrictMode","document","getElementById","require","this","pop","module","exports","values","suits","s","v","push","playerDeal","computerDeal","hand","player","aces","forEach"],"mappings":"gbAGe,SAASA,EAAT,GAAgC,IAARC,EAAO,EAAPA,KACrC,OACE,sBAAKC,UAAU,OAAf,UAEE,oBAAIA,UAAY,gBAAhB,SAAiCD,EAAKE,OACtC,oBAAID,UAAY,aAAhB,SAA8BD,EAAKG,QACnC,oBAAIF,UAAY,mBAAhB,SAAoCD,EAAKE,UCLhC,SAASE,EAAT,GAAsE,IAArDC,EAAoD,EAApDA,WAAYC,EAAwC,EAAxCA,YAAaC,EAA2B,EAA3BA,cAAeC,EAAY,EAAZA,UAEpE,OACI,qBAAKP,UAAU,SAAf,SACI,sBAAKA,UAAU,WAAf,UAEI,oBAAIA,UAAU,aAAd,SACGI,EAAWI,OACVJ,EAAWK,KAAI,SAACV,EAAKW,GACnB,OACE,6BACE,cAAC,EAAD,CAAeX,KAAQA,KADhBW,MAKX,OAGN,gCACI,6CAAgBH,KAChB,0CAAaD,KACb,wCAAWD,a,MCrBhB,SAASM,EAAT,GAKX,IAJFC,EAIC,EAJDA,WACAC,EAGC,EAHDA,gBACAC,EAEC,EAFDA,cACAC,EACC,EADDA,cAEAC,QAAQC,IAAIL,GAEZ,IAiBMM,EAjBY,WAChB,GAAIN,EAAWJ,OAAS,EAAG,OAAO,EAClC,GAAII,EAAWJ,QAAU,EAAG,CAC1B,GAAsB,IAAlBM,EACF,MAAI,CAAC,IAAK,IAAK,KAAKK,QAAQP,EAAW,GAAGV,QAAU,EAC3C,GAC0B,MAAxBU,EAAW,GAAGV,MAChB,GAEAU,EAAW,GAAGV,MAGvB,GAAsB,IAAlBY,EAAqB,OAAOC,GAKpBK,GAElB,OACE,qBAAKpB,UAAU,SAAf,SACE,sBAAKA,UAAU,WAAf,UAEE,oBAAIA,UAAU,oBAAd,SACGY,EAAWJ,OACRI,EAAWH,KAAI,SAACV,EAAMW,GACpB,OACE,oBAEEV,UACoB,IAAlBc,EAAA,sBAAqCJ,GAAU,IAHnD,SAME,cAAC,EAAD,CAAeX,KAAMA,KALhBW,MASX,OAEN,gCACE,0CAAaG,KAEb,yCAAYK,a,MClDP,SAASG,EAAT,GAA8F,EAA9EC,KAA+E,IAAzEC,EAAwE,EAAxEA,SAAUC,EAA8D,EAA9DA,MAAsBC,GAAwC,EAAvDC,cAAuD,EAAxCD,aAAaX,EAA2B,EAA3BA,cAAea,EAAY,EAAZA,SAC/F,OACE,sBAAK3B,UAAU,OAAf,UACE,sBAAKA,UAAU,YAAY4B,QAAW,kBAAML,EAAST,IAArD,yBAAuE,mBAAGd,UAAU,YAAb,yBACvE,sBAAKA,UAAU,aAAa4B,QAASJ,EAArC,yBAA8C,mBAAGxB,UAAU,aAAb,sBAC9C,sBAAKA,UAAS,mBAAc2B,EAAS,GAAG,UAAYC,QAASH,EAA7D,yBAA4E,mBAAGzB,UAAU,WAAb,uB,MCNnE,SAAS6B,EAAT,GAAwD,IAAtCC,EAAqC,EAArCA,WAAYC,EAAyB,EAAzBA,QAASL,EAAgB,EAAhBA,cAClD,OAEI,8BACoB,IAAfI,EAEG,sBAAK9B,UAAU,eAAf,UAA+B+B,EAAQ,qBAAKH,QAAWF,EAAc1B,UAAU,aAAxC,2BAE3C,O,oBCFG,SAASgC,IACtB,MAAsCC,mBAAS,IAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KACA,EAAoCF,mBAAS,IAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KACA,EAAwCJ,mBAAS,IAAjD,mBAAOK,EAAP,KAAqBC,EAArB,KAEA,EAA0CN,mBAAS,GAAnD,mBAAOnB,EAAP,KAAsB0B,EAAtB,KACA,EAAoCP,mBAAS,GAA7C,mBAAOH,EAAP,KAAmBW,EAAnB,KACA,EAAsCR,mBAAS,IAA/C,mBAAOS,EAAP,KAAoBC,EAApB,KACA,EAAsCV,mBAAS,GAA/C,mBAAO5B,EAAP,KAAoBuC,EAApB,KACA,EAA0CX,mBAAS,GAAnD,mBAAOlB,EAAP,KAAsB8B,EAAtB,KACA,EAA0CZ,oBAAS,GAAnD,mBAAOa,EAAP,KAAsBC,EAAtB,KACA,EAAgCd,oBAAS,GAAzC,mBAAON,EAAP,KAAiBqB,EAAjB,KAEA,EAAkCf,mBAAS,IAA3C,mBAAO1B,EAAP,KAAkB0C,EAAlB,KACA,GAA0ChB,mBAAS,KAAnD,qBAAO3B,GAAP,MAAsB4C,GAAtB,MACA,GAA8CjB,mBAAS,KAAvD,qBAAOpB,GAAP,MAAwBsC,GAAxB,MAEM5B,GAAW,SAAC6B,GAEhB,GADAJ,GAAY,GACe,KAAvBd,EAAY1B,OAAhB,CAKA,IAaI6C,EAbAC,EAAUC,IAAMC,KAAKtB,GAEZ,IAATkB,GACFf,GAAc,SAACoB,GACb,MAAM,GAAN,mBAAWA,GAAX,CAAsBH,OAGb,IAATF,GACFb,GAAgB,SAACkB,GACf,MAAM,GAAN,mBAAWA,GAAX,CAAsBH,OAKb,IAATF,KAEqB,KADvBC,EAAYE,IAAMG,UAAUtB,EAAYtB,IAC1B6C,MACZlB,EAAc,GAEZY,EAAUO,OAGH,IAATR,IAEqB,KADvBC,EAAYE,IAAMG,UAAUpB,EAAcxB,IAC5B6C,MACZlB,EAAc,QA7BhBoB,MAkCEnC,GAAgB,WACpB,IAAIoB,EAAJ,CACA,IAAIgB,EAAUP,IAAMjC,OAChByC,EAAeR,IAAMS,QAAQF,GACjC3B,EAAe4B,GACf1B,EAAc,IACdE,EAAgB,IAChBQ,GAAiB,GACjBN,EAAc,GACdD,EAAiB,GACjBQ,GAAY,GACZC,EAAa,KAGTY,GAAY,WAChB,IAAII,EAAQV,IAAMW,KAAKhC,GACvBG,EAAc4B,EAAM,IACpB1B,EAAgB0B,EAAM,IACtBjB,GAAY,IAgHd,OAlFAmB,qBAAU,WAERzC,OAEC,IAEHyC,qBAAU,WAER,IAAIC,EAAab,IAAMG,UAAUtB,EAAYtB,GACvB,IAAlBA,GAAqB8B,EAAewB,EAAWR,SAClD,CAACxB,IAEJ+B,qBAAU,WAER,IAAIC,EAAab,IAAMG,UAAUtB,EAAYtB,GACvB,IAAlBA,GAAqB+B,EAAiBuB,EAAWR,SACpD,CAACtB,IAEJ6B,qBAAU,WAEW,IAAfrC,IACFa,EAAe,eACfQ,GAAmBtC,GAAkBN,GACrC2C,GAAiB5C,GAAgBC,IAEhB,IAAfuB,IACFa,EAAe,WACfQ,GAAmBtC,GAAkBN,GACrC2C,GAAiB5C,GAAgBC,IAEhB,IAAfuB,GACFa,EAAe,QAEE,IAAfb,GACFa,EAAe,iBAEhB,CAACG,EAAehB,IAEnBqC,qBAAU,WAESZ,IAAMG,UAAUtB,EAAYtB,GAC9B6C,OACblB,EAAc,GACdM,GAAiB,MAElB,CAAC1C,IAEJ8D,qBAAU,WAER,GAAsB,IAAlBrD,GACkB,IAAlBA,EAAqB,CACvB,IAAIsD,EAAab,IAAMG,UAAUpB,EAAcxB,GAwB/C,GAvBIC,IAAkBqD,EAAWR,OAC/Bf,EAAiBuB,EAAWR,OAE1BQ,EAAWR,MAAQ,KACrBnB,EAAc,GACdM,GAAiB,IAGfqB,EAAWR,OAAS,IAAMQ,EAAWR,OAAS,KAC5C7C,IAAkBV,IACpBoC,EAAc,GACdM,GAAiB,IAEfhC,EAAgBV,IAClBoC,EAAc,GACdM,GAAiB,IAEfhC,EAAgBV,IAClBoC,EAAc,GACdM,GAAiB,KAIjBqB,EAAWR,MAAQ,GAErB,YADArC,GAAS,MAIZ,CAACW,EAAapB,EAAewB,EAAcvB,IAG5C,sBAAKf,UAAU,mBAAf,UACE,cAAC,IAAD,CAAMA,UAAU,YAAYqE,GAAG,QAA/B,kBAGA,cAAC,EAAD,CACEzD,WAAY0B,EACZzB,gBAAiBA,GACjBC,cAAeA,EACfC,cAAeA,IAEjB,cAAC,EAAD,CACEO,KAAMY,EACNP,SAAUA,EACVb,cAAeA,EACfS,SAAUA,GACVC,MAhHQ,WACU,IAAlBV,GACF0B,EAAiB,IA+Gfd,cAAeA,GACfD,YA3Gc,WAClBwB,GAAa,SAACQ,GACZ,OAAOA,EAAY,SA2GnB,cAAC,EAAD,CACErD,WAAYgC,EACZ/B,YAAaA,EACbE,UAAWA,EACXD,cAAeA,KAEjB,cAAC,EAAD,CACEN,UAAU,eACV8B,WAAYA,EACZC,QAASW,EACThB,cAAeA,Q,MC3NR,SAAS4C,IACtB,OACE,sBAAKtE,UAAU,yBAAf,UACE,cAAC,IAAD,CAAMA,UAAU,cAAcqE,GAAG,UAAjC,+BACA,sBAAKrE,UAAU,QAAf,0EAEE,mBAAGuE,KAAK,8BAAR,gCAFF,OAGM,mBAAGA,KAAK,0BAAR,yBAHN,OAKA,sBAAKvE,UAAU,cAAf,UACE,kDADF,gMAI+B,0CAJ/B,sBAKE,0CALF,sCAK0D,4CAL1D,4DAM2D,2CAN3D,gJASE,0CATF,mCCUSwE,MAjBf,WAEE,OACE,qBAAKxE,UAAU,MAAf,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOyE,KAAK,UAAUC,OAAQ,SAACC,GAC7B,OAAO,cAAC,EAAD,eAAgBA,OAEzB,cAAC,IAAD,CAAOF,KAAK,QAAQC,OAAQ,SAACC,GAC3B,OAAO,cAAC,EAAD,aAAa3E,UAAU,eAAkB2E,OAElD,cAAC,IAAD,CAAUN,GAAG,gBCVrBO,IAASF,OACP,cAAC,IAAMG,WAAP,UACE,cAAC,IAAD,UAAQ,cAAC,EAAD,QAEVC,SAASC,eAAe,U,kBCX1B,IAAIf,EAAUgB,EAAQ,IAEtB,SAASjF,EAAKG,EAAOD,GACnBgF,KAAK/E,MAAQA,EACb+E,KAAKhF,KAAOA,EAqCd,SAASuD,EAAKlC,GAIZ,OADWA,EAAK4D,MAkDlBC,EAAOC,QAAU,CACf9D,KAxFF,WACE2D,KAAKI,OAAS,CACZ,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KACA,IACA,IACA,IACA,KAEFJ,KAAKK,MAAQ,CAAC,SAAK,SAAK,SAAK,UAG7B,IAFA,IAAI/B,EAAQ,GAEHgC,EAAI,EAAGA,EAAIN,KAAKK,MAAM9E,OAAQ+E,IACrC,IAAK,IAAIC,EAAI,EAAGA,EAAIP,KAAKI,OAAO7E,OAAQgF,IACtCjC,EAAMkC,KAAK,IAAI1F,EAAKkF,KAAKI,OAAOG,GAAIP,KAAKK,MAAMC,KAInD,OAAOhC,GAgEPS,QA7DF,SAAqB1C,GAEnB,OADmB0C,EAAQ1C,IA6D3BkC,OACAU,KAlDF,SAAc5C,GACZ,IAAIoE,EAAa,GACbC,EAAe,GAOnB,OALAD,EAAWD,KAAKjC,EAAKlC,IACrBqE,EAAaF,KAAKjC,EAAKlC,IACvBoE,EAAWD,KAAKjC,EAAKlC,IACrBqE,EAAaF,KAAKjC,EAAKlC,IAEhB,CAACoE,EAAYC,IA0CpBjC,UAvCF,SAAmBkC,EAAMC,GACvB,IAAIC,EAAO,GACPlC,EAAQ,EAWZ,OAVAgC,EAAKG,SAAQ,SAAChG,GACO,MAAfA,EAAKG,OACP0D,GAAS,EACTkC,EAAKL,KAAK,KACD,CAAC,IAAK,IAAK,KAAKtE,QAAQpB,EAAKG,QAAU,EAChD0D,GAAS,GAETA,GAAsB,EAAb7D,EAAKG,SAGd0D,EAAQ,GACH,CACLA,QACAD,MAAM,GAECC,EAAQ,IAAMkC,EAAKtF,OAAS,EAI9B,CACLoD,MAJFA,GAAS,GAKPD,MAAM,GAGD,CACLC,MAAMA,EACND,MAAM,O","file":"static/js/main.61f5641f.chunk.js","sourcesContent":["import React from 'react'\r\nimport './CardContainer.css';\r\n\r\nexport default function CardContainer({card}) {\r\n  return (\r\n    <div className=\"card\">\r\n      {/* {`${card.value} of ${card.suit}`} */}\r\n      <h2 className = \"card-suit-top\">{card.suit}</h2>\r\n      <h1 className = \"card-value\">{card.value}</h1>\r\n      <h2 className = \"card-suit-bottom\">{card.suit}</h2>\r\n      \r\n    </div>\r\n  )\r\n}\r\n","import React from 'react';\r\nimport './Player.css';\r\nimport CardContainer from '../CardContainer/CardContainer';\r\n\r\nexport default function Player({playerDeck, playerTotal, playerBalance, betAmount}) {\r\n  // console.log(playerDeck);\r\n    return (\r\n        <div className=\"Player\">\r\n            <div className=\"card-bar\">\r\n                {/* Card Components (max 5 slots), Bet Amount, Balance*/}\r\n                <ul className=\"card-slots\">\r\n                  {playerDeck.length?\r\n                    playerDeck.map((card,index) => {\r\n                      return (\r\n                        <li key={index}>\r\n                          <CardContainer card = {card} />\r\n                        </li>\r\n                      )\r\n                    })\r\n                    : null\r\n                  }\r\n                </ul>\r\n                <div>\r\n                    <p>Bet Amount: {betAmount}</p>\r\n                    <p>Balance: {playerBalance}</p>\r\n                    <p>Total: {playerTotal}</p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport \"./Dealer.css\";\r\nimport CardContainer from \"../CardContainer/CardContainer\";\r\n\r\nexport default function Dealer({\r\n  dealerDeck,\r\n  computerBalance,\r\n  currentPlayer,\r\n  computerTotal,\r\n}) {\r\n  console.log(dealerDeck);\r\n\r\n  const calcTotal = () => {\r\n    if (dealerDeck.length < 1) return 0;\r\n    if (dealerDeck.length >= 1) {\r\n      if (currentPlayer === 1) {\r\n        if ([\"K\", \"Q\", \"J\"].indexOf(dealerDeck[0].value) >= 0) {\r\n          return 10;\r\n        } else if (dealerDeck[0].value === \"A\") {\r\n          return 11;\r\n        } else {\r\n          return dealerDeck[0].value;\r\n        }\r\n      } else {\r\n        if (currentPlayer === 2) return computerTotal;\r\n      }\r\n    }\r\n  };\r\n\r\n  const realTotal = calcTotal();\r\n\r\n  return (\r\n    <div className=\"Dealer\">\r\n      <div className=\"card-bar\">\r\n        {/* Card Components, Balance*/}\r\n        <ul className=\"dealer-card-slots\">\r\n          {dealerDeck.length\r\n            ? dealerDeck.map((card, index) => {\r\n                return (\r\n                  <li\r\n                    key={index}\r\n                    className={\r\n                      currentPlayer === 1 ? `dealer-card-${index}` : \" \"\r\n                    }\r\n                  >\r\n                    <CardContainer card={card} />\r\n                  </li>\r\n                );\r\n              })\r\n            : null}\r\n        </ul>\r\n        <div>\r\n          <p>Balance: {computerBalance}</p>\r\n          {/* <p>Total: {`${currentPlayer === 1 ? dealerDeck[0].value : total}`}</p> */}\r\n          <p>Total : {realTotal}</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nimport \"./Deck.css\";\r\n\r\nexport default function Deck({ deck, drawCard, stand, constructDeck, increaseBet, currentPlayer, betAllow }) {\r\n  return (\r\n    <div className=\"Deck\">\r\n      <div className=\"deck-icon\" onClick = {() => drawCard(currentPlayer)}>🃏<p className=\"deck-text\">Deal/Hit</p></div>\r\n      <div className=\"stand-icon\" onClick={stand}>🤚<p className=\"stand-text\">Stand</p></div>\r\n      <div className={`bet-icon ${betAllow?\"\":\"hidden\"}`} onClick={increaseBet}>💸<p className=\"bet-text\">Bet</p></div>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react'\r\nimport './Outcome.css'\r\n\r\nexport default function Outcome({gameStatus, outcome, constructDeck}) {\r\n    return (\r\n        \r\n        <div>\r\n            {gameStatus !== 1 \r\n            ? \r\n                <div className=\"game-outcome\">{outcome}<div onClick = {constructDeck}className=\"next-round\">Next Round</div></div>\r\n            :\r\n            null\r\n            }\r\n\r\n        </div>\r\n    )\r\n}\r\n","import \"./BattlePage.css\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Player from \"../../components/Player/Player\";\r\nimport Dealer from \"../../components/Dealer/Dealer\";\r\nimport Deck from \"../../components/Deck/Deck\";\r\nimport Outcome from \"../../components/UI/Outcome/Outcome\";\r\nimport cards from \"../../utilities/cards\";\r\n\r\nexport default function BattlePage() {\r\n  const [currentDeck, setCurrentDeck] = useState([]);\r\n  const [playerHand, setPlayerHand] = useState([]);\r\n  const [computerHand, setComputerHand] = useState([]);\r\n\r\n  const [currentPlayer, setCurrentPlayer] = useState(1);\r\n  const [gameStatus, setGameStatus] = useState(1); //0 loss, 1 game on, 2 win, draw\r\n  const [gameOutcome, setGameOutcome] = useState(\"\");\r\n  const [playerTotal, setPlayerTotal] = useState(0);\r\n  const [computerTotal, setComputerTotal] = useState(0);\r\n  const [roundProgress, setRoundProgress] = useState(false);\r\n  const [betAllow, setBetAllow] = useState(true);\r\n\r\n  const [betAmount, setBetAmount] = useState(10);\r\n  const [playerBalance, setPlayerBalance] = useState(1000);\r\n  const [computerBalance, setComputerBalance] = useState(1000);\r\n\r\n  const drawCard = (turn) => {\r\n    setBetAllow(false);\r\n    if (currentDeck.length === 52) {\r\n      dealCards();\r\n      return;\r\n    }\r\n\r\n    let newCard = cards.draw(currentDeck);\r\n\r\n    if (turn === 1) {\r\n      setPlayerHand((prevState) => {\r\n        return [...prevState, newCard];\r\n      });\r\n    }\r\n    if (turn === 2) {\r\n      setComputerHand((prevState) => {\r\n        return [...prevState, newCard];\r\n      });\r\n    }\r\n    // Check for bust\r\n    let handTotal;\r\n    if (turn === 1) {\r\n      handTotal = cards.bustCheck(playerHand, currentPlayer);\r\n      if (handTotal.bust === true) {\r\n        setGameStatus(0);\r\n      }\r\n      if (handTotal.total === 21) {\r\n      }\r\n    }\r\n    if (turn === 2) {\r\n      handTotal = cards.bustCheck(computerHand, currentPlayer);\r\n      if (handTotal.bust === true) {\r\n        setGameStatus(2);\r\n      }\r\n    }\r\n  };\r\n\r\n  const constructDeck = () => {\r\n    if (roundProgress) return;\r\n    let newDeck = cards.deck();\r\n    let shuffledDeck = cards.shuffle(newDeck);\r\n    setCurrentDeck(shuffledDeck);\r\n    setPlayerHand([]);\r\n    setComputerHand([]);\r\n    setRoundProgress(true);\r\n    setGameStatus(1);\r\n    setCurrentPlayer(1);\r\n    setBetAllow(true);\r\n    setBetAmount(0);\r\n  };\r\n\r\n  const dealCards = () => {\r\n    let hands = cards.deal(currentDeck);\r\n    setPlayerHand(hands[0]);\r\n    setComputerHand(hands[1]);\r\n    setBetAllow(false);\r\n  };\r\n\r\n  // const help = () => {\r\n  //   console.log(\"Deck = \", currentDeck);\r\n  //   console.log(\"Player Hand =\", playerHand);\r\n  //   console.log(\"Computer Hand =\", computerHand);\r\n  //   console.log(\"Player Total =\", playerTotal);\r\n  //   console.log(\"Computer Total =\", computerTotal);\r\n  // };\r\n\r\n  // const check = () => {\r\n  //   if (currentPlayer === 1) cards.bustCheck(playerHand, currentPlayer);\r\n  //   if (currentPlayer === 2) cards.bustCheck(computerHand, currentPlayer);\r\n  // };\r\n\r\n  const stand = () => {\r\n    if (currentPlayer === 1) {\r\n      setCurrentPlayer(2);\r\n      // cards.bustCheck(computerHand, currentPlayer);\r\n    }\r\n  };\r\n\r\n  const increaseBet = () => {\r\n    setBetAmount((prevState) => {\r\n      return prevState + 10;\r\n    });\r\n  };\r\n\r\n\r\n  useEffect(() => {\r\n    // Creates the deck and shuffles\r\n    constructDeck();\r\n    // dealCards();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // This Use Effect sets the Current Player's Total\r\n    let bustResult = cards.bustCheck(playerHand, currentPlayer);\r\n    if (currentPlayer === 1) setPlayerTotal(bustResult.total);\r\n  }, [playerHand]);\r\n\r\n  useEffect(() => {\r\n    // This Use Effect sets the Current Player's Total\r\n    let bustResult = cards.bustCheck(playerHand, currentPlayer);\r\n    if (currentPlayer === 2) setComputerTotal(bustResult.total);\r\n  }, [computerHand]);\r\n\r\n  useEffect(() => {\r\n    // This Use Effect sets the Game Outcome message\r\n    if (gameStatus === 0) {\r\n      setGameOutcome(\"Dealer Wins\");\r\n      setComputerBalance(computerBalance + betAmount);\r\n      setPlayerBalance(playerBalance - betAmount);\r\n    }\r\n    if (gameStatus === 2) {\r\n      setGameOutcome(\"You Win\");\r\n      setComputerBalance(computerBalance - betAmount);\r\n      setPlayerBalance(playerBalance + betAmount);\r\n    }\r\n    if (gameStatus === 3) {\r\n      setGameOutcome(\"Draw\");\r\n    }\r\n    if (gameStatus === 1) {\r\n      setGameOutcome(\"In Progress\");\r\n    }\r\n  }, [roundProgress, gameStatus]);\r\n\r\n  useEffect(() => {\r\n    // sets Game status to lost once player busts\r\n    let bustResult = cards.bustCheck(playerHand, currentPlayer);\r\n    if (bustResult.bust) {\r\n      setGameStatus(0);\r\n      setRoundProgress(false);\r\n    }\r\n  }, [playerTotal]);\r\n\r\n  useEffect(() => {\r\n    // This Use Effect draws a card for the dealer if necessary\r\n    if (currentPlayer === 1) return;\r\n    if (currentPlayer === 2) {\r\n      let bustResult = cards.bustCheck(computerHand, currentPlayer);\r\n      if (computerTotal !== bustResult.total) {\r\n        setComputerTotal(bustResult.total);\r\n      }\r\n      if (bustResult.total > 21) {\r\n        setGameStatus(2);\r\n        setRoundProgress(false);\r\n      }\r\n\r\n      if (bustResult.total >= 17 && bustResult.total <= 21) {\r\n        if (computerTotal === playerTotal) {\r\n          setGameStatus(3);\r\n          setRoundProgress(false);\r\n        }\r\n        if (computerTotal > playerTotal) {\r\n          setGameStatus(0);\r\n          setRoundProgress(false);\r\n        }\r\n        if (computerTotal < playerTotal) {\r\n          setGameStatus(2);\r\n          setRoundProgress(false);\r\n        }\r\n      }\r\n\r\n      if (bustResult.total < 17) {\r\n        drawCard(2);\r\n        return;\r\n      }\r\n    }\r\n  }, [currentDeck, currentPlayer, computerHand, computerTotal]);\r\n\r\n  return (\r\n    <div className=\"battle-container\">\r\n      <Link className=\"home-link\" to=\"/home\">\r\n        Home\r\n      </Link>\r\n      <Dealer\r\n        dealerDeck={computerHand}\r\n        computerBalance={computerBalance}\r\n        currentPlayer={currentPlayer}\r\n        computerTotal={computerTotal}\r\n      />\r\n      <Deck\r\n        deck={currentDeck}\r\n        betAllow={betAllow}\r\n        currentPlayer={currentPlayer}\r\n        drawCard={drawCard}\r\n        stand={stand}\r\n        constructDeck={constructDeck}\r\n        increaseBet={increaseBet}\r\n      />\r\n      <Player\r\n        playerDeck={playerHand}\r\n        playerTotal={playerTotal}\r\n        betAmount={betAmount}\r\n        playerBalance={playerBalance}\r\n      />\r\n      <Outcome\r\n        className=\"game-outcome\"\r\n        gameStatus={gameStatus}\r\n        outcome={gameOutcome}\r\n        constructDeck={constructDeck}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react'\r\nimport { Link } from \"react-router-dom\";\r\nimport './LandingPage.css';\r\n\r\nexport default function LandingPage() {\r\n  return (\r\n    <div className=\"landing-page-container\">\r\n      <Link className=\"battle-link\" to=\"/battle\">The Blackest Jack</Link>\r\n      <div className=\"intro\">\r\n        Welcome to Blackest Jack, web-based Blackjack game created by\r\n        <a href=\"https://github.com/mattius9\"> Matthew Krasucki </a> \r\n        and <a href=\"http://rohitjacob.tech/\">Rohit Jacob</a>. \r\n      </div>\r\n      <div className=\"description\">\r\n        <strong>How to Play:</strong> The objective of each round of \r\n        Blackjack is to collect cards in your hand with a combined value \r\n        as close to 21 as possible, without exceeding 21. If your hand \r\n        total goes over 21, you will <strong>Bust</strong>, losing the round. \r\n        <strong> Hit</strong> when you want to draw a card, and <strong>Stand </strong> \r\n        when you want to reveal the Dealer's hand. If the Dealer <strong>Busts</strong>, \r\n        or their hand total is less than your own, you win! A draw is reached if \r\n        both the Player and Dealer have the same hand total. Increase your \r\n        <strong> Bet</strong> if you are feeling lucky!\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import './App.css';\r\nimport React from 'react';\r\nimport { Redirect, Route, Switch } from \"react-router-dom\";\r\nimport BattlePage from './pages/BattlePage/BattlePage';\r\nimport LandingPage from './pages/LandingPage/LandingPage';\r\n\r\nfunction App() {\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Switch>\r\n        <Route path=\"/battle\" render={(props) => {\r\n          return <BattlePage {...props}/>\r\n        }}/>\r\n        <Route path=\"/home\" render={(props) => {\r\n          return <LandingPage className=\"LandingPage\" {...props}/>\r\n        }}/>\r\n        <Redirect to=\"/home\" />\r\n      </Switch>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Router><App /></Router>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n","let shuffle = require(\"lodash.shuffle\");\r\n\r\nfunction card(value, suit) {\r\n  this.value = value;\r\n  this.suit = suit;\r\n}\r\n\r\nfunction deck() {\r\n  this.values = [\r\n    \"2\",\r\n    \"3\",\r\n    \"4\",\r\n    \"5\",\r\n    \"6\",\r\n    \"7\",\r\n    \"8\",\r\n    \"9\",\r\n    \"10\",\r\n    \"J\",\r\n    \"Q\",\r\n    \"K\",\r\n    \"A\",\r\n  ];\r\n  this.suits = [\"♣\", \"♦\", \"♥\", \"♠\"];\r\n  let cards = [];\r\n\r\n  for (let s = 0; s < this.suits.length; s++) {\r\n    for (let v = 0; v < this.values.length; v++) {\r\n      cards.push(new card(this.values[v], this.suits[s]));\r\n    }\r\n  }\r\n\r\n  return cards;\r\n}\r\n\r\nfunction shuffleDeck(deck) {\r\n  let shuffledDeck = shuffle(deck);\r\n  return shuffledDeck;\r\n  // randomly change indexes of cards in deck array\r\n}\r\n\r\nfunction draw(deck) {\r\n  // draw a random card from the deck\r\n  // returns card object\r\n  let card = deck.pop();\r\n  return card;\r\n}\r\n\r\nfunction deal(deck) {\r\n  let playerDeal = [];\r\n  let computerDeal = [];\r\n\r\n  playerDeal.push(draw(deck));\r\n  computerDeal.push(draw(deck));\r\n  playerDeal.push(draw(deck));\r\n  computerDeal.push(draw(deck));\r\n\r\n  return [playerDeal, computerDeal];\r\n}\r\n\r\nfunction bustCheck(hand, player) {\r\n  let aces = [];\r\n  let total = 0;\r\n  hand.forEach((card) => {\r\n    if (card.value === \"A\") {\r\n      total += 1;\r\n      aces.push(11);\r\n    } else if ([\"K\", \"Q\", \"J\"].indexOf(card.value) >= 0) {\r\n      total += 10;\r\n    } else {\r\n      total += card.value * 1;\r\n    }\r\n  });\r\n  if (total > 21) {\r\n    return {\r\n      total, \r\n      bust: true,\r\n    }\r\n  } else if (total < 12 && aces.length > 0) {\r\n    total += 10;\r\n    if (total === 21) {\r\n    }\r\n    return {\r\n      total, \r\n      bust: false,\r\n    };\r\n  } else {\r\n    return {\r\n      total:total, \r\n      bust: false,\r\n    };\r\n  }\r\n}\r\n\r\nmodule.exports = {\r\n  deck,\r\n  shuffle: shuffleDeck,\r\n  draw,\r\n  deal,\r\n  bustCheck,\r\n};\r\n"],"sourceRoot":""}